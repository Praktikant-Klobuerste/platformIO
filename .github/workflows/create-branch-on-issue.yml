name: Create branch when "ready for dev" label is added

on:
  issues:
    types: [labeled]

permissions:
  contents: write       # Branch anlegen
  issues: write         # Kommentar im Issue
  pull-requests: write  # nur n√∂tig, falls du die PR-Erstellung unten aktivierst

jobs:
  create_issue_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Create branch from issue title (only if label matches)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // --- Guard: nur bei Label "ready for dev" (case-insensitive)
            const issue = context.payload.issue;
            const repo  = context.repo;
            const labelName = (context.payload.label?.name || "").toLowerCase();
            if (labelName !== "ready for dev") {
              console.log(`Label "${labelName}" ist nicht "ready for dev" ‚Äì √ºberspringe.`);
              return;
            }

            // --- Branch-Name bauen: issue-<nr>-<slug>
            function slugify(title) {
              return title
                // deutsche Umlaute zuerst "umschreiben"
                .replace(/√§/g, "ae").replace(/√∂/g, "oe").replace(/√º/g, "ue").replace(/√ü/g, "ss")
                // diakritische Zeichen entfernen
                .normalize("NFKD").replace(/[\u0300-\u036f]/g, "")
                .toLowerCase().trim()
                .replace(/[^a-z0-9]+/g, "-")   // alles Nicht-Alphanum durch "-"
                .replace(/^-+|-+$/g, "")       // Leading/Trailing "-" entfernen
                .slice(0, 60);                 // L√§nge begrenzen
            }

            const slug = slugify(issue.title || "");
            const branchName = `issue-${issue.number}${slug ? '-' + slug : ''}`;
            const refName = `heads/${branchName}`;

            // --- Default-Branch ermitteln (z. B. main/develop)
            const { data: repoData } = await github.rest.repos.get({
              owner: repo.owner,
              repo: repo.repo
            });
            const baseBranch = repoData.default_branch;

            // --- SHA des Base-Branches holen
            const { data: baseRef } = await github.rest.git.getRef({
              owner: repo.owner,
              repo: repo.repo,
              ref: `heads/${baseBranch}`
            });
            const baseSha = baseRef.object.sha;

            // --- Pr√ºfen, ob der Ziel-Branch bereits existiert
            let exists = true;
            try {
              await github.rest.git.getRef({
                owner: repo.owner,
                repo: repo.repo,
                ref: refName
              });
              console.log(`Branch ${branchName} existiert bereits.`);
            } catch (e) {
              if (e.status === 404) {
                exists = false;
              } else {
                throw e;
              }
            }

            // --- Branch anlegen, falls nicht vorhanden
            if (!exists) {
              await github.rest.git.createRef({
                owner: repo.owner,
                repo: repo.repo,
                ref: `refs/${refName}`,
                sha: baseSha
              });
              console.log(`Branch ${branchName} wurde von ${baseBranch} erstellt.`);
            }

            // --- Kommentar im Issue mit Checkout-Anleitung
            const comment = exists
              ? `üîÅ Es existiert bereits ein Branch f√ºr dieses Issue:\n\n\`${branchName}\`\n\n**Checkout:**\n\`\`\`bash\ngit fetch origin\ngit switch ${branchName} || git checkout -b ${branchName} origin/${branchName}\n\`\`\`\n`
              : `üå± Branch erstellt: \`${branchName}\`\n\n**Checkout lokal:**\n\`\`\`bash\ngit fetch origin\ngit checkout -b ${branchName} origin/${branchName}\n# oder mit neuerem Git:\n# git switch --track -c ${branchName} origin/${branchName}\n\`\`\`\n\n**Basis:** \`${baseBranch}\``;

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue.number,
              body: comment
            });

            // --- Optional: Draft-PR automatisch erstellen (auskommentiert lassen/entfernen, wenn nicht gew√ºnscht)
            /*
            if (!exists) {
              await github.rest.pulls.create({
                owner: repo.owner,
                repo: repo.repo,
                title: `[WIP] ${issue.title}`,
                head: branchName,
                base: baseBranch,
                draft: true,
                body: `Automatisch erstellt f√ºr #${issue.number}.`
              });
              console.log(`Draft-PR f√ºr ${branchName} erstellt.`);
            }
            */
